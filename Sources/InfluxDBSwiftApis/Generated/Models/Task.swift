//
// Task.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct Task: Codable {

    public enum LastRunStatus: String, Codable, CaseIterable {
        case failed = "failed"
        case success = "success"
        case canceled = "canceled"
    }
    public var id: String
    /** The type of task, this can be used for filtering tasks on list actions. */
    public var type: String?
    /** The ID of the organization that owns this Task. */
    public var orgID: String
    /** The name of the organization that owns this Task. */
    public var org: String?
    /** The name of the task. */
    public var name: String
    /** An optional description of the task. */
    public var description: String?
    public var status: TaskStatusType?
    public var labels: [Label]?
    /** The ID of the authorization used when this task communicates with the query engine. */
    public var authorizationID: String?
    /** The Flux script to run for this task. */
    public var flux: String
    /** A simple task repetition schedule; parsed from Flux. */
    public var every: String?
    /** A task repetition schedule in the form &#39;* * * * * *&#39;; parsed from Flux. */
    public var cron: String?
    /** Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default. */
    public var offset: String?
    /** Timestamp of latest scheduled, completed run, RFC3339. */
    public var latestCompleted: Date?
    public var lastRunStatus: LastRunStatus?
    public var lastRunError: String?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var links: TaskLinks?

    public init(id: String, type: String? = nil, orgID: String, org: String? = nil, name: String, description: String? = nil, status: TaskStatusType? = nil, labels: [Label]? = nil, authorizationID: String? = nil, flux: String, every: String? = nil, cron: String? = nil, offset: String? = nil, latestCompleted: Date? = nil, lastRunStatus: LastRunStatus? = nil, lastRunError: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, links: TaskLinks? = nil) {
        self.id = id
        self.type = type
        self.orgID = orgID
        self.org = org
        self.name = name
        self.description = description
        self.status = status
        self.labels = labels
        self.authorizationID = authorizationID
        self.flux = flux
        self.every = every
        self.cron = cron
        self.offset = offset
        self.latestCompleted = latestCompleted
        self.lastRunStatus = lastRunStatus
        self.lastRunError = lastRunError
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.links = links
    }

}

