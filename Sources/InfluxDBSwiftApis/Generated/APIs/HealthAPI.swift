//
// HealthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension InfluxDB2API {


open class HealthAPI {
    /**
     Get the health of an instance
     
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHealth(zapTraceSpan: String? = nil, apiResponseQueue: DispatchQueue = InfluxDB2API.apiResponseQueue, completion: @escaping ((_ data: HealthCheck?,_ error: Error?) -> Void)) {
        getHealthWithRequestBuilder(zapTraceSpan: zapTraceSpan).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the health of an instance
     - GET /health
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - returns: RequestBuilder<HealthCheck> 
     */
    open class func getHealthWithRequestBuilder(zapTraceSpan: String? = nil) -> RequestBuilder<HealthCheck> {
        let path = "/health"
        let URLString = InfluxDB2API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Zap-Trace-Span": zapTraceSpan?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<HealthCheck>.Type = InfluxDB2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
}
