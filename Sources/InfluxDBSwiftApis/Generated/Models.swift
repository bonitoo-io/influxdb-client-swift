// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum InfluxDBError : Error, CustomStringConvertible {
    /// Error response to HTTP request.
    ///
    /// - errorCode: HTTP status code
    /// - headers: Response HTTP headers
    /// - body: Response body
    /// - cause: Cause of error
    case error(_ statusCode: Int, _ headers: [AnyHashable: Any]?, _ body: [String: Any]?, _ cause: Error)

    public var description: String {
        switch self {
        case .error(let statusCode, let headers, let body, let cause):
            var desc = "(\(statusCode)) Reason: \(cause)"
            if let body = body {
                desc.append(", HTTP Body: \(body)")
            }
            if let headers = headers {
                desc.append(", HTTP Headers: \(headers.reduce(into: [:]) {$0["\($1.0)"] = "\($1.1)"})")
            }
            return desc
        }
    }
}

public enum DownloadException : Error {
    case responseDataMissing
    case responseFailed
    case requestMissing
    case requestMissingPath
    case requestMissingURL
}

public enum DecodableRequestBuilderError: Error {
    case emptyDataResponse
    case nilHTTPResponse
    case unsuccessfulHTTPStatusCode
    case jsonDecoding(DecodingError)
    case generalError(Error)
}


open class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            if let key = key.base as? String, let value = value as? String {
                header[key] = value
            }
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}
