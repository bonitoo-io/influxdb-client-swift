#
# The MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

version: 2.1

commands:
  influxdb-onboarding:
    steps:
      - run:
          name: Install onBoarding dependencies
          command: |
            apt-get update
            apt-get install wget curl ruby --yes
            gem install --no-ri --no-rdoc xcpretty
      - run:
          name: Post onBoarding request to InfluxDB 2
          command: ./Scripts/influxdb-onboarding.sh
  prepare:
    description: Prepare environment to tests
    steps:
      - checkout
      - influxdb-onboarding
  swiftlint-install:
    description: Download and install swiftlint
    steps:
      - run: |
          apt-get update
          apt-get install wget unzip --yes
          wget https://github.com/realm/SwiftLint/releases/download/0.40.3/swiftlint_linux.zip
          unzip -n swiftlint_linux.zip
          ln -s /root/project/swiftlint /usr/bin/swiftlint

jobs:
  tests-swift:
    parameters:
      swift-image:
        type: string
        default: &default-swift-image "swift:5.3"
      influxdb-image:
        type: string
        default: &default-influxdb-image "quay.io/influxdb/influxdb:2.0.0-rc"
    docker:
      - image: << parameters.swift-image >>
      - image: << parameters.influxdb-image >>
        environment:
          INFLUXD_HTTP_BIND_ADDRESS: :8086
    steps:
      - prepare
      - restore_cache:
          name: Restoring Package Cache
          keys:
            - &cache-key package-cache-v2-{{ checksum "Package.swift" }}-<< parameters.swift-image >>
            - package-cache-v2-{{ checksum "Package.swift" }}
            - package-cache-v2-
      - run:
          name: Install dependencies
          command: swift package update
      - run:
          name: Run tests
          command: |
            make test
            llvm-cov report .build/debug/influxdb-client-swiftPackageTests.xctest -instr-profile .build/debug/codecov/default.profdata -use-color
            llvm-cov export -format="lcov" .build/debug/influxdb-client-swiftPackageTests.xctest -instr-profile .build/debug/codecov/default.profdata > info.lcov
      - save_cache:
          name: Saving Package Cache
          key: *cache-key
          paths:
            - Package.resolved
            - ./.build/repositories
      - store_test_results:
          path: build/
      - store_artifacts:
          path: build/reports/junit.xml
      - run:
          name: Collecting coverage reports
          command: bash <(curl -s https://codecov.io/bash) -f ./info.lcov || echo "Codecov did not collect coverage reports"

  check-code-style:
    docker:
      - image: *default-swift-image
    steps:
      - checkout
      - swiftlint-install
      - run:
          name: Checks style consistency across sources.
          command: make check-lint

  check-documentation:
    docker:
      - image: *default-swift-image
    steps:
      - checkout
      - restore_cache:
          name: Restoring Cache
          keys:
            - &documentation-cache-key sc-cache-v3-swift:5.3
      - run:
          name: Build SourceKitten and jazzy
          command: |
            apt-get update
            apt-get install ruby-dev libsqlite3-dev --yes
            gem install --no-ri --no-rdoc jazzy
            if [ ! -f ./SourceKitten/.build/release/sourcekitten ]; then
              git clone https://github.com/jpsim/SourceKitten.git
              cd SourceKitten
              swift package resolve
              swift build --configuration release
              cd ../
            fi
            ln -s /root/project/SourceKitten/.build/release/sourcekitten /usr/bin/sourcekitten
      - run:
          name: Checks generating docs
          command: |
            make generate-doc
      - save_cache:
          name: Saving Cache
          key: *documentation-cache-key
          paths:
            - ./SourceKitten/.build/release/sourcekitten
            - /var/lib/gems/

  check-generate-sources:
    docker:
      - image: *default-swift-image
    steps:
      - checkout
      - restore_cache:
          name: Restoring Cache
          keys:
            - &generate-sources-cache-key gs-cache-v1-swift:5.3
      - run:
          name: Install Maven
          command: |
            apt-get update
            apt-get install maven curl --yes
      - run:
          name: Checks generating sources from swagger
          command: |
            ./Scripts/generate-sources.sh
            make build
      - save_cache:
          name: Saving Cache
          key: *generate-sources-cache-key
          paths:
            - ~/.m2

  check-examples:
    docker:
      - image: *default-swift-image
      - image: *default-influxdb-image
        environment:
          INFLUXD_HTTP_BIND_ADDRESS: :8086
    steps:
      - prepare
      - swiftlint-install
      - restore_cache:
          name: Restoring Example Cache
          keys:
            - &cache-example-key example-cache-v2-{{ checksum "Examples/CreateNewBucket/Package.swift" }}
            - example-cache-v2-{{ checksum "Examples/CreateNewBucket/Package.swift" }}
            - example-cache-v2-
      - run:
          name: Check CreateNewBucket
          command: |
            cd Examples/CreateNewBucket/
            swiftlint --strict
            swift package resolve
            swift build --target InfluxDBSwift
            swift build --target InfluxDBSwiftApis
            swift build --target ArgumentParser
            swift build
      - save_cache:
          name: Saving Example Cache
          key: *cache-example-key
          paths:
            - Examples/CreateNewBucket/Package.resolved
            - Examples/CreateNewBucket/.build/repositories

workflows:
  version: 2
  build:
    jobs:
      - check-code-style
      - check-documentation
      - check-generate-sources
      - check-examples
      - tests-swift:
          name: swift-5.3
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - tests-swift
